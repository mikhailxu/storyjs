-# vim: set sw=2 ts=2 expandtab :
- uses :screen

- content_for :template do
  .dialog-template
    .dialog
      .title
        .title-content
      .dialog-content
      .dialog-buttons
        %button.button .label

- content_for :style do
  :plain
    .dialog .title {
      text-align: center;
    }
    .dialog {
      position: absolute;
      left: 40px;
      top: 40px;
      right: 40px;
      bottom: 40px;
      background: #999;
      padding: 30px;
      border-radius: 20px;
      border: 10px solid gray;
      -webkit-box-shadow: 2px 2px 5px black, 2px 2px 3px black inset; 
    }
    .dialog .dialog-buttons {
      bottom: 20px;
      right: 20px;
      position: absolute;
    }

- content_for :script do
  :plain
    $('#template .dialog-template').defineTemplate('dialog-template', {
      $template: Template.coalesce('.container', '=screen-template'),
      $let : [{
        data: '...dialog' 
      }], 
      '.dialog' : {
        $as : 'screen-content',
        $in : 'data',
        '.dialog-frame' : {
          '@style' : { 
            width: Template.coalesce('.width', '=500'), 
            height: Template.coalesce('.height', '=200'),
            padding: Template.coalesce('.padding', '=15'),
            'box-shadow' : '=3px 3px 5px #333, 2px 2px 3px #333 inset'
          }
        },
        '.dialog-content' : '%content',
        '.title-content' : '%title',
        '.button' : { $each : { button : 'data.buttons' },
          $in : 'button',
          '@text': '.label',
          $setup: function() {
            var controller = Template.access('data.self');
            var action = Template.access('.action');
            var handler = Template.access('data.handler');
            $(this).click(function() {
              handler.call(controller, action);
            }); 
          }
        }
      }
    });

    Dialog = _layer.defineClass(function(type, content, buttons, handler) {
      var self = this;
      var model = new MVC($overlay({}, content, {
        type: type,
        dialog: {
          self: self,
          buttons: buttons,
          handler: function(arg) { 
            var result = !handler || handler.call(this.arg);
            if(result || undefined === result) {
              this.close();
            }
          }
        }
      }));
      this.data = model.data;
      this.template = $("<div/>").appendTo($('body')).template(model, {
        '.' : {
          $template: '.type'
        }
      });
    }, null, {
      is_open: function() {
        return this.hasOwnProperty('template');
      },
      close: function() {
        if(this.hasOwnProperty('template')) {
          this.template.clearTemplate().remove();
          delete this.template;
        }
        delete this.data;
      }
    });

    Story.DefineNode('Dialog', function() {
      var args = __args();
      this.create_dialog = function() {
        var instance = this;
        var dialog = Dialog.apply(null, args);
        var handler = dialog.data('dialog.handler')();
        dialog.data('dialog.handler', function(arg) {
          try {
            return handler.call(this, arg);
          } finally {
            instance.parent.scope.result = arg;
            instance.scope.story.update();
          }
        });
        return dialog;
      };
    }, {
      setup: function() {
        this.dialog = this.create_dialog();
      },
      update: function() {
        return this.dialog.is_open();
      },
      teardown: function() {
        if(this.dialog.is_open()) {
          this.dialog.close();
        }
      }
    });

- content_for :template do
  .basic-dialog
    .title 
    .content

- content_for :script do
  :plain
    $('#template .basic-dialog').defineTemplate('basic-dialog', { 
      $template : '=dialog-template',
      '...dialog' : '.dialog',
      '.content' : { $as : 'content', '@text' : '.content' },
      '.title' : { $as : 'title', '@text' : '.title' }
    });
